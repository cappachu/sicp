
Chapter 2: Building Abstractions with Data pg 79
================================================

Compound Data (as with Compound Procedures):

- elevate the conceptual level at which we design programs
- enhance the expressive power of the language
- modularity
- better model real world phenomena.
- Data Abstraction: separate representation of data from how data is used/manipulated

Closure (notion of): the glue for combining data objects should enable combining not only primitive data but other compound data  as well. We'll use no special "data" operations, only procedures to form compound data.

Conventional Interfaces

Symbolic Expressions: data whose elementary parts can be arbitrary symbols

Generic Operations: handles different types of data

Data Directed Programming: technique that allows individual data representations to be designed in isolation and then combined additively (i.e. without modification)

2.1 Introduction to Data Abstraction pg 83
------------------------------------------

Data Abstraction: program makes no assumption about the data it operates on - they operate on ABSTRACT DATA. CONCRETE DATA representation is defined independent of the programs that use the data.

SELECTORS (extractors) and CONSTRUCTORS implement the ABSTRACT data in terms of the CONCRETE representation.

2.1.1 Example: Arithmetic Operations for Rational Numbers pg 83
---------------------------------------------------------------

WISHFUL THINKING: We can ASSUME that we have procedures numer, denom (selectors) and make-rat (constructor) and define relations using them.

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))

(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))


Pairs pg 85
-----------

cons, car, cdr

cons CONSTRUCTS a PAIR

LIST-STRUCTURED data: data objects contructed from pairs.


Representing rational numbers pg 80
-----------------------------------

(define (make-rat n d) (cons n d))

(define (numer x) (car x))

(define (denom x) (cdr x))


(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

We can modify the make-rat procedure without changing the procedures that implement actual operations to reduce rational numbers to lowest terms.

(define (make-rate n d)
  (let ((g (gcd n d)))
    (cons (/ n g) (/ d g))))


NOTE: We could have defined make-rate, numer and denom like so:

(define make-rat cons)

which is more efficient but harder to debug, trace since all calls to cons will be watched rather than just calls to make-rat.

;; Exercise 2.1 pg 87
;; The version of gcd I'm using produces a divisor that
;; is the sign of n/d so the naive make-rat produces the
;; signed rational number we desire.
;; The following procedure should do the same irrespective
;; of the sign of the divisor produced by any gcd procedure:
(define (make-rat-signed n d) 
  (let ((g (gcd n d)))
    (let ((numer (/ n g))
          (denom (/ d g)))
      (let ((sign (if (< d 0) - +)))
        (cons (sign numer) (sign denom))))))


2.1.2 Abstraction Barriers pg 88
--------------------------------
Abstraction Barriers: 
- isolate different "levels" of a system, seperating programs that use the data abstraction from programs that implement the data abstraction. 
- Procedures at each level are the interfaces that define the abstraction barriers and connect the different levels.
- Makes programs easier to maintain and modify

We could perform gcd at selection time rather than construction time:

(define (make-rat n d)
  (cons n d))

(define (numer x)
  (let ((g (gcd (car x) (cdr x))))
    (/ (car x) g)))

(define (denom x)
  (let ((g (gcd (car x) (cdr x))))
    (/ (cdr x) g)))

Changing from one representation to another we wouldn't have to change procedures like add-rat and sub-rat one abstraction layer above. Depending on how often we access numerators and denominators we can choose which implementation to use. We can DEFER THE DECISION and continue to make progress on the rest of the system.

;; Exercise 2.2 pg 89

(define (make-segment start end)
  (cons start end))

(define (start-segment s)
  (car s))

(define (end-segment s)
  (cdr s))

(define (make-point x y)
  (cons x y))

(define (x-point p)
  (car p))

(define (y-point p)
  (cdr p))

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

(define (midpoint-segment s)
  (define (average a b)
    (/ (+ a b) 2.0))
  (let ((x-start (x-point (start-segment s)))
        (y-start (y-point (start-segment s)))
        (x-end (x-point (end-segment s)))
        (y-end (y-point (end-segment s))))
    (make-point (average x-start x-end) (average y-start y-end))))

;; (midpoint-segment (make-segment (make-point 10 10)
;;                                 (make-point 0 0)))

;; Exercise 2.3 pg 90
(define (make-rect left-segment bottom-segment)
  (cons left-segment bottom-segment))

(define (left-segment r)
  (car r))

(define (bottom-segment r)
  (cdr r))

(define (length s)
  (define (square x) (* x x))
  (let ((x-start (x-point (start-segment s)))
        (y-start (y-point (start-segment s)))
        (x-end (x-point (end-segment s)))
        (y-end (y-point (end-segment s))))
    (sqrt (+ (square (- y-end y-start))
             (square (- x-end x-start))))))

(define (area r)
  (* (length (left-segment r))
     (length (bottom-segment r))))

(define (perimeter r)
  (+ (* 2 (length (left-segment r)))
     (* 2 (length (bottom-segment r)))))

;; We could just as easily have used right-segment and top-segment
;; to represent a rectangle and we would have to change just
;; the area and perimeter procedures. However, if we represented rectangles with
;; two points for example, we would need to change the area and perimeter procedures.

;; (area (make-rect (make-segment (make-point 0 0)
;;                                (make-point 0 5))
;;                  (make-segment (make-point 0 0)
;;                                (make-point 10 0))))

;; (perimeter (make-rect (make-segment (make-point 0 0)
;;                                     (make-point 0 5))
;;                       (make-segment (make-point 0 0)
;;                                     (make-point 10 0))))

2.1.3 What is Meant by Data? pg 90
----------------------------------
DATA: defined by a collection of SELECTORS, CONSTRUCTORS and conditions these procedures must fullfill to be a valid representation (ASSERTIONS).

For example:
make-rat, numer, and denom must satisfy the condition that, for any integer n and any non-zero integer d, if x is (make-rat n d), then:

(numer x)    n
--------- = ---
(denom x)    d

Note: Here we are relying on facts about integers (equality and division). ABSTRACT MODELS define new kinds of data objects in terms of previously defined types of data objects. Assertions can then be reduced to assertions about previously defined objects.

Similarly for the notion of a pair the assertion that for any objects x and y, if z is (cons x y) then (car z) is x and (cdr z) is y. ANy triple of procedures that satisfies the condition can be used as the basis for implementing pairs. This is illustrated by an implementation of cons, car and cdr using PROCEDURES (without using data structures):

Note: the procedure cons returns a procedure dispatch

REVIEW !!! - closure?

(define (cons x y)
  (define (dispatch m)
    (cond ((= m 0) x)
          ((= m 1) y)
          (else (error "Argument not 0 or 1 -- CONS" m))))
  dispatch)

(define (car z) (z 0))

(define (cdr z) (z 1))

The ability to manipulate procedures as objects automatically provides the ability to represent compound objects. This style of programming is called MESSAGE PASSING.

;; Exercise 2.4 pg 92
;; see Section 1.1.5 page 14 for Substitution Model
;;
;; REVIEW !!!
;; commented out
;;(define (cons x y)
;;  (lambda (m) (m x y)))

;;(define (car z)
;;  (z (lambda (p q) p)))

;;(define (cdr z)
;;  (z (lambda (p q) q)))

;; Verification using substitution model
;; (car (cons x y))

;; body of cons is
;; (lambda (m) (m x y))

;; replacing cons
;; (car (lambda (m) (m x y)))

;; body of car is
;; (z (lambda (p q) p))

;; replacing formal parameter z with body of cons
;; ((lambda (m) (m x y)) (lambda (p q) p))

;; body of first lambda
;; (m x y)

;; replacing formal paramter m body of first lambda with second lambda
;; ((lambda (p q) p) x y)

;; body of second lambda
;; p

;; replacing formal parameter p 
;; x

;; Exercise 2.5 pg 92

;; a and b are non-negative integers (nni)
(define (cons-nni a b)
  (define (cons-iter product a b)
    (cond ((= a b 0) product)
          ((> a 0) (cons-iter (* 2 product) (dec a) b))
          ((> b 0) (cons-iter (* 3 product) a (dec b)))
          (else (error "a and b must be non-negative integers"))))
  (cons-iter 1 a b))

;; number of times base divides number resulting in an integer quotient
(define (integer-log base number)
  (define (iter count quot)
    (if (= (remainder quot base) 0)
        (iter (inc count) (/ quot base))
        count))
  (iter 0 number))

(define (car-nni z)
  (integer-log 2 z))

(define (cdr-nni z)
  (integer-log 3 z))

;; (car-nni (cons-nni 3 4))
;; (cdr-nni (cons-nni 3 4))




































